{"version":3,"sources":["components/header.js","components/footer.js","sortingAlgos/mergeSort.js","sortingAlgos/quickSort.js","sortingAlgos/insertionSort.js","description/desc_sorting.js","components/sortingInterface.js","components/main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","style","fontFamily","fontStyle","fontSize","color","Footer","rel","href","target","class","mergeSortHelper","arr","left","right","indexValuePairs","mid","Math","floor","merge","leftPart","slice","rightPart","i","j","k","length","push","quickSortHelper","tmp_arr","swap_triplets","isRandom","random_idx","random","swap","pivot","a","b","tmp","desc_mergeSort","desc_quickSort","desc_randomQuickSort","desc_insertSort","desc_reset","SortInterface","state","isBusy","timePerBar","barColor","min_val","max_val","len","bgColor0","bgColor1","new_arr","this","setState","result","mergeSort","bars","document","getElementsByClassName","map","pair","index","setTimeout","backgroundColor","height","isRandomized","highlight1","randomizedQuickSort","quickSort","triplet","height0","triplets","insertionSort","tmp_height","tmp_bgColor","resetArray","bar_seq","value","idx","width","marginLeft","marginTop","id","effect","border","delayShow","time","renderBars","Button","disabled","onClick","handleMergeSort","handleQuickSort","handleInsertionSort","html","Slider","defaultValue","min","max","valueLabelDisplay","onChange","event","onSpeedChange","onBarCountChange","Component","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b82f19cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className='tc grow pa2 ba bg-dark-gray dib bw2 shadow-5' style={{fontFamily: \"jasmine\", fontStyle: \"bold\", fontSize: \"7em\"}}>\r\n      <h3 style={{color:\"silver\"}}> Sorting Visualizer </h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\n\r\nfunction Footer(props) {\r\n    return(\r\n    <div className=\"footer ma0\">  \r\n            <div className=\"row justify-content-center bg-light-silver\">             \r\n                <div className=\"col-12 col-sm-3 col-md-2 align-self-center\" style={{color: \"black\"}}>\r\n                    <div className=\"ma3\" style={{fontFamily: \"jasmine\", fontStyle: \"bold\", fontSize: \"7em\"}}>\r\n                        <h5>Sorting Visualizer</h5>\r\n                    </div>\r\n                    <div style={{fontStyle: \"italic\"}}>\r\n\t\t              Salman Shaikh<br />\r\n\t\t              B.E. in Information Technology'23<br/>\r\n                      Jadavpur University<br />\r\n                      <p className=\"footer__text\">\r\n                        © 2022 - developed by\r\n                        <a rel=\"noreferrer\" href=\"https://github.com/ssk-2002\" target=\"_blank\"> Salman Shaikh</a>\r\n                      </p>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* this div is for contact info-> mail, linkedin, github */}\r\n                <div className=\"col-12 col-sm-3 col-md-2 mt-3 align-self-center\">\r\n                    <div>\r\n                        <a className=\"btn btn-social-icon btn-linkedin\" href=\"https://www.linkedin.com/in/salman-shaikh-82989b1b9/\"><i className=\"fa fa-linkedin\"></i></a>{' '}\r\n                        <br /> <br /> <a className=\"btn btn-social-icon\" href=\"mailto:salmanhere101@gmail.com\"><i className=\"fa fa-envelope-o\"></i></a>\r\n                        <br /> <br /> <a className=\"btn btn-social-icon\" rel=\"noreferrer\" href=\"https://github.com/ssk-2002\" target=\"_blank\"> <i class=\"fa fa-github\"></i></a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","export const mergeSort = (arr) => {\r\n    const tmp = arr.slice();\r\n    const indexValuePairs = [];\r\n\r\n    mergeSortHelper(tmp, 0, tmp.length, indexValuePairs);\r\n\r\n    return {\r\n        indexValuePairs: indexValuePairs,\r\n        arr: tmp\r\n    };\r\n}\r\n\r\n\r\nconst mergeSortHelper = (arr, left, right, indexValuePairs) => {\r\n    if (left >= right)\r\n        return;\r\n\r\n    const mid = left + Math.floor((right - left) / 2);\r\n\r\n    mergeSortHelper(arr, left, mid, indexValuePairs);\r\n    mergeSortHelper(arr, mid + 1, right, indexValuePairs);\r\n\r\n\r\n    merge(arr, left, mid, right, indexValuePairs);\r\n}\r\n\r\nconst merge = (arr, left, mid, right, indexValuePairs) => {\r\n    const leftPart = arr.slice(left, mid + 1);\r\n    const rightPart = arr.slice(mid + 1, right + 1);\r\n\r\n    let i = 0, j = 0, k = left;\r\n\r\n    while (i < leftPart.length && j < rightPart.length) {\r\n        if (leftPart[i] <= rightPart[j]) {\r\n            arr[k] = leftPart[i++];\r\n\r\n        }\r\n        else {\r\n            arr[k] = rightPart[j++];\r\n        }\r\n\r\n        indexValuePairs.push([k, arr[k]]);\r\n        k++;\r\n    }\r\n\r\n    while (i < leftPart.length) {\r\n        arr[k] = leftPart[i++];\r\n        indexValuePairs.push([k, arr[k]]);\r\n        k++;\r\n    }\r\n\r\n    while (j < rightPart.length) {\r\n        arr[k] = rightPart[j++];\r\n        indexValuePairs.push([k, arr[k]]);\r\n        k++;\r\n    }\r\n}\r\n\r\n","export const quickSort = (arr) => {\r\n\r\n    const tmp_arr = arr.slice();\r\n    const swap_triplets = [];\r\n\r\n    quickSortHelper(tmp_arr, 0, tmp_arr.length - 1, swap_triplets, false);\r\n\r\n    return {\r\n        swap_triplets: swap_triplets,\r\n        arr: tmp_arr\r\n    };\r\n}\r\n\r\nexport const randomizedQuickSort = (arr) => {\r\n\r\n    const tmp_arr = arr.slice();\r\n    const swap_triplets = [];\r\n\r\n    quickSortHelper(tmp_arr, 0, tmp_arr.length - 1, swap_triplets, true);\r\n\r\n    return {\r\n        swap_triplets: swap_triplets,\r\n        arr: tmp_arr\r\n    };\r\n}\r\n\r\n\r\nconst quickSortHelper = (tmp_arr, left, right, swap_triplets, isRandom) => {\r\n\r\n    if (left > right)\r\n        return;\r\n\r\n    if (isRandom) {\r\n        const random_idx = left + Math.floor((right - left) * Math.random());\r\n        swap(tmp_arr, left, random_idx);\r\n        swap_triplets.push([left, random_idx, false]);\r\n    }\r\n\r\n    const pivot = tmp_arr[left];\r\n\r\n    let i = left; // last index having value <= pivot\r\n    let j = left + 1; //first index to examine\r\n\r\n    while (j <= right) {\r\n        if (tmp_arr[j] <= pivot) {\r\n            swap(tmp_arr, i + 1, j);\r\n            swap_triplets.push([i + 1, j, false]);\r\n            i++;\r\n        }\r\n\r\n        j++;\r\n    }\r\n\r\n    swap(tmp_arr, left, i);\r\n    swap_triplets.push([left, i, true]); /*pivot swapped to final position i*/\r\n\r\n    quickSortHelper(tmp_arr, left, i - 1, swap_triplets, isRandom);\r\n    quickSortHelper(tmp_arr, i + 1, right, swap_triplets, isRandom);\r\n}\r\n\r\nconst swap = (arr, a, b) => {\r\n    const tmp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = tmp;\r\n}\r\n\r\n","\r\nexport const insertionSort = (arr) => {\r\n\r\n    const tmp_arr = arr.slice();\r\n    const triplets = [];\r\n    triplets.push([0,0,true]); //color 0th\r\n\r\n    for(let i=1; i<tmp_arr.length; i++){\r\n\r\n        let j = i;\r\n\r\n        if(tmp_arr[j-1] <= tmp_arr[j]){ \r\n\r\n            triplets.push([j, j, true]); //just color it\r\n            continue;\r\n        }\r\n\r\n        while(j-1 >= 0 && tmp_arr[j-1] > tmp_arr[j]){\r\n            swap(tmp_arr, j-1, j);\r\n            triplets.push([j-1, j, false]); //swap color and height of j-1th and jth\r\n            j--;\r\n        }\r\n\r\n        //arr[i] went to j+1 th index\r\n\r\n        triplets.push([j, j, true]);\r\n    }\r\n\r\n    return {triplets: triplets,\r\n            arr: tmp_arr};\r\n}\r\n\r\nconst swap = (arr, a, b) => {\r\n    const tmp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = tmp;\r\n} ","export const desc_mergeSort = \"Applies MERGE SORT on the array! <br /> It requires O(N) additional SPACE to attain O(NlogN) TIME COMPLEXITY. <br /> WHAT YOU WILL SEE HERE? Values from additional array are written to the original array. <br /> So, Whenever a bar height is overridden, it will be highlighted!\";\r\n\r\nexport const desc_quickSort = \"Applies QUICK SORT on the array! <br /> NOTE: Here we choose the first element of subarray as the PIVOT <br /> WHAT YOU WILL SEE HERE? Two elements being swapped will be highlighted. <br /> In each iteration, after the current pivot is placed at its correct position - it will be highlighted!\";\r\n\r\nexport const desc_randomQuickSort = \"Applies RANDOMIZED QUICK SORT on the array! <br /> Overcomes the DRAWBACK of GENERAL QUICK SORY by choosing the pivot element RANDOMLY. <br /> WHAT YOU WILL SEE HERE? Two elements being swapped will be highlighted.<br /> In each iteration, after the current pivot is placed at its correct position - will be highlighted!\";\r\n\r\nexport const desc_insertSort = \"Applies INSERTION SORT on the array! <br /> Maintains the first portion of array (highlighted) sorted by searching for the correct position of each element INDIVIDUALLY! <br /> WHAT YOU WILL SEE HERE? How each element gets its perfect position that is shown here!\";\r\n\r\nexport const desc_reset = \"Resets the array elements by taking random values from a predifined range! <br /> Does NOT change array size (number of bars)!\";","import { React, Component } from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { Button } from 'reactstrap';\r\nimport { mergeSort } from '../sortingAlgos/mergeSort';\r\nimport { quickSort, randomizedQuickSort } from '../sortingAlgos/quickSort';\r\nimport { insertionSort } from '../sortingAlgos/insertionSort';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport \"tachyons\";\r\nimport './sortingInterface.css';\r\n\r\nimport {desc_reset, desc_mergeSort, desc_quickSort, desc_randomQuickSort, desc_insertSort } from '../description/desc_sorting';\r\n\r\nclass SortInterface extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            arr: [],\r\n            isBusy: false,  // it tells us whether any of the sorting algos are running or not\r\n            timePerBar: 10,\r\n            barColor: \"Black\",\r\n            min_val: 10,\r\n            max_val: 500,\r\n            len: 100,\r\n            bgColor0: \"purple\",  // the starting color of the bar diagram \r\n            bgColor1: \"Aqua\",   // the ending color of the bar\r\n        }\r\n    }\r\n\r\n\r\n    // re-generates the array\r\n    resetArray() {\r\n        const new_arr = [];\r\n\r\n        const min_val = this.state.min_val;\r\n        const max_val = this.state.max_val;\r\n        const len = this.state.len;\r\n\r\n        for (var i = 0; i < len; i++) {\r\n            new_arr.push(min_val + Math.floor(Math.random() * (max_val - min_val)));  //random values are stored in the array that fall in the range (1-500)\r\n        }\r\n\r\n        this.setState({\r\n            arr: new_arr,  // finally we modify the state\r\n        });\r\n\r\n    }\r\n\r\n\r\n    //the code for handling merge sort animation\r\n    handleMergeSort() {\r\n\r\n        const highlight0 = \"yellow\";\r\n        const highlight1 = \"#620037\";\r\n\r\n        this.setState({\r\n            isBusy: true\r\n        });\r\n\r\n        const result = mergeSort(this.state.arr);\r\n        const indexValuePairs = result.indexValuePairs;\r\n        const tmp_arr = result.arr;\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n\r\n        indexValuePairs.map((pair, index) => {\r\n            setTimeout(\r\n                () => {\r\n                    if(index > 0){\r\n                        bars[indexValuePairs[index-1][0]].style.backgroundColor = highlight1;\r\n                    }\r\n\r\n                    bars[pair[0]].style.height = `${pair[1]}px`;\r\n                    bars[pair[0]].style.backgroundColor = highlight0;\r\n\r\n                    if (index === indexValuePairs.length - 1) {\r\n                        this.setState({\r\n                            arr: tmp_arr,\r\n                            isBusy: false,\r\n                        });\r\n\r\n                        for (let bar of bars) {\r\n                            bar.style.backgroundColor = this.state.barColor;\r\n                        }\r\n                    }\r\n\r\n                }, index * this.state.timePerBar);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    //code for handling quick sort animation\r\n    handleQuickSort(isRandomized) {\r\n        const highlight0 = \"#620037\";\r\n        const highlight1 = \"yellow\";\r\n\r\n        let result = [];\r\n\r\n        if (isRandomized)\r\n            result = randomizedQuickSort(this.state.arr);\r\n        else\r\n            result = quickSort(this.state.arr);\r\n\r\n        const swap_triplets = result.swap_triplets;\r\n        const tmp_arr = result.arr;\r\n\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n\r\n        this.setState({\r\n            isBusy: true\r\n        });\r\n\r\n        swap_triplets.map((triplet, index) => {\r\n            setTimeout(() => {\r\n                bars[triplet[0]].style.backgroundColor = highlight1;\r\n                bars[triplet[1]].style.backgroundColor = highlight1;\r\n\r\n                if (index > 0) {\r\n                    if (!swap_triplets[index - 1][2]) {\r\n                        bars[swap_triplets[index - 1][0]].style.backgroundColor = this.state.barColor;\r\n                        bars[swap_triplets[index - 1][1]].style.backgroundColor = this.state.barColor;\r\n                    }\r\n                    else if (swap_triplets[index - 1][0] != swap_triplets[index - 1][1])\r\n                        bars[swap_triplets[index - 1][0]].style.backgroundColor = this.state.barColor;\r\n\r\n                }\r\n\r\n                const height0 = bars[triplet[0]].style.height;\r\n                bars[triplet[0]].style.height = bars[triplet[1]].style.height;\r\n                bars[triplet[1]].style.height = height0;\r\n\r\n                if (triplet[2]) {\r\n                    bars[triplet[1]].style.backgroundColor = highlight0;\r\n                }\r\n\r\n                if (index === swap_triplets.length - 1) {\r\n                    this.setState({\r\n                        arr: tmp_arr,\r\n                        isBusy: false\r\n                    });\r\n\r\n                    for (let bar of bars) {\r\n                        bar.style.backgroundColor = this.state.barColor;\r\n                    }\r\n                }\r\n            }\r\n                , index * this.state.timePerBar\r\n            );\r\n        });\r\n    }\r\n\r\n\r\n\r\n    //code for handling insertion sort animation\r\n    handleInsertionSort() {\r\n\r\n        const highlight = \"#620037\";\r\n\r\n        const result = insertionSort(this.state.arr);\r\n        const triplets = result.triplets;\r\n        const tmp_arr = result.arr;\r\n\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n\r\n        this.setState({\r\n            isBusy: true\r\n        });\r\n\r\n        triplets.map((triplet, index) => {\r\n            setTimeout(() => {\r\n                if (triplet[2]) {\r\n                    bars[triplet[0]].style.backgroundColor = highlight;\r\n                }\r\n                else {\r\n                    const tmp_height = bars[triplet[1]].style.height;\r\n                    const tmp_bgColor = bars[triplet[1]].style.backgroundColor;\r\n                    bars[triplet[1]].style.height = bars[triplet[0]].style.height;\r\n                    bars[triplet[1]].style.backgroundColor = bars[triplet[0]].style.backgroundColor;\r\n\r\n                    bars[triplet[0]].style.height = tmp_height;\r\n                    bars[triplet[0]].style.backgroundColor = tmp_bgColor;\r\n\r\n                }\r\n\r\n                if (index === triplets.length - 1) {\r\n                    this.setState({\r\n                        arr: tmp_arr,\r\n                        isBusy: false\r\n                    });\r\n\r\n                    for (let bar of bars) {\r\n                        bar.style.backgroundColor = this.state.barColor;\r\n                    }\r\n                }\r\n            }\r\n            , index * this.state.timePerBar)\r\n        });\r\n    }\r\n\r\n\r\n    // This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered\r\n    componentDidMount() {  \r\n        this.resetArray();\r\n    }\r\n\r\n\r\n    //this is the method that heplps in rendering the bars\r\n    renderBars() {\r\n        const bar_seq = this.state.arr.map((value, idx) => {\r\n\r\n            return (\r\n                <div key={idx} >\r\n                    <div data-tip=\"\" data-for={\"tootip-\" + idx} className=\"bar \" style={\r\n                        {\r\n                            width: `${89 * 0.7 / this.state.arr.length}vw`,\r\n                            backgroundColor: this.state.barColor,\r\n                            marginLeft: `${89 * 0.3 / this.state.arr.length}vw`,\r\n                            height: `${value}px`,\r\n                            marginTop: \"10px\"\r\n\r\n                        }\r\n                    } ></div>\r\n                    <ReactTooltip className='myClass' id={\"tootip-\" + idx} effect=\"float\" border=\"true\" delayShow={100}>{this.state.isBusy ? \"wait\" : value} </ReactTooltip>\r\n                </div>\r\n            );\r\n        });\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"col-12 col-md-11 border d-flex flex-wrap align-items-end justify-content-center\"\r\n                style={{\r\n                    \"background-image\": `linear-gradient(to bottom right, ${this.state.bgColor0}, ${this.state.bgColor1})`,\r\n                    height: `${this.state.max_val + 50}px`\r\n                }}>\r\n                {bar_seq}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    // this methdo gets executed when the value of the speed is modified\r\n    onSpeedChange(value) {\r\n        const time = 400 / value;  // the lesser the 'value' will be, the more the time each bar will get\r\n        this.setState({\r\n            timePerBar: time\r\n        });\r\n    }\r\n\r\n\r\n    //this method gets executed when the number of bars is modified\r\n    onBarCountChange(value) {\r\n        this.state.len = value;\r\n        this.resetArray();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* this is where we render the bar diagram */}\r\n                <div className=\"row bg-near-black justify-content-center\"> {/* 'row' provides some space before the bar diagram*/}\r\n                    <hr />\r\n                    {this.renderBars()}\r\n                </div>\r\n\r\n                {/* here we have the buttons and controllers together*/}\r\n                <div className=\"row d-flex justify-content-center align-items-center bg-navy\">\r\n                    {/* buttons and their descriptions*/}\r\n                    <div className=\"col-8 col-md-6 \" style={{fontFamily: \"jasmine\", fontStyle: \"bold\"}}>\r\n                        {/* we disable the buttons when the state is busy */}\r\n                        <Button data-tip={desc_reset} data-for=\"tip-reset\" id=\"btn-reset\" className=\"ma1 grow dib bw2 shadow-5\" color=\"primary\" disabled={this.state.isBusy} onClick={() => this.resetArray()}>Reset Array</Button>{' '}\r\n                        <Button data-tip={desc_mergeSort} data-for=\"tip-merge\" id=\"btn-mergeSort\" className=\"ma1 grow dib bw2 shadow-5\" color=\"success\" disabled={this.state.isBusy} onClick={() => this.handleMergeSort()}>Merge Sort</Button>{' '}\r\n                        <Button data-tip={desc_quickSort} data-for=\"tip-quick\" id=\"btn-quickSort\" className=\"ma1 grow dib bw2 shadow-5\" color=\"success\" disabled={this.state.isBusy} onClick={() => this.handleQuickSort(false)}>Quick Sort</Button>{' '}\r\n                        <Button data-tip={desc_randomQuickSort} data-for=\"tip-random-merge\" id=\"btn-randQuickSort\" className=\"ma1 grow dib bw2 shadow-5\" color=\"success\" disabled={this.state.isBusy} onClick={() => this.handleQuickSort(true)}>Randomized Quick Sort</Button>{' '}\r\n                        <Button data-tip={desc_insertSort} data-for=\"tip-insertion\" id=\"btn-insertSort\" className=\"ma1 grow dib bw2 shadow-5\" color=\"success\" disabled={this.state.isBusy} onClick={() => this.handleInsertionSort()}>Insertion Sort</Button>{' '}\r\n\r\n                        {/* here, the descriptions of each button is handled */}\r\n                        <ReactTooltip className='myClass' id=\"tip-reset\" effect=\"float\" border=\"true\" html={true} delayShow={200}>{desc_reset} </ReactTooltip>\r\n                        <ReactTooltip className='myClass' id=\"tip-merge\" effect=\"float\" border=\"true\" html={true} delayShow={200}>{desc_mergeSort}</ReactTooltip>\r\n                        <ReactTooltip className='myClass' id=\"tip-quick\" effect=\"float\" border=\"true\" html={true} delayShow={200}>{desc_quickSort}</ReactTooltip>\r\n                        <ReactTooltip className='myClass' id=\"tip-random-merge\" effect=\"float\" border=\"true\" html={true} delayShow={200}>{desc_randomQuickSort}</ReactTooltip>\r\n                        <ReactTooltip className='myClass' id=\"tip-insertion\" effect=\"float\" border=\"true\" html={true} delayShow={200}>{desc_insertSort}</ReactTooltip>\r\n                    </div>\r\n\r\n                    {/* here we have the controllers */}\r\n                    <div className=\"grow bg-aqua shadow b ba ma3 col-6 col-md-4 justify-content-center mt-3\">\r\n                        <p style={{fontFamily: \"jasmine\", fontStyle: \"bold\"}}>Speed </p>\r\n                        <Slider\r\n                            defaultValue={50}\r\n                            aria-labelledby=\"speed\"\r\n                            min={5}\r\n                            max={100}\r\n                            valueLabelDisplay=\"auto\"\r\n                            onChange={(event, value) => {\r\n                                this.onSpeedChange(value);\r\n                            }}\r\n                            disabled={this.state.isBusy}\r\n                        />\r\n                        \r\n                        <p style={{fontFamily: \"jasmine\", fontStyle: \"bold\"}}>Number of bars </p>\r\n                        <Slider\r\n                            defaultValue={100}\r\n                            aria-labelledby=\"Bars\"\r\n                            min={20}\r\n                            max={200}\r\n                            valueLabelDisplay=\"auto\"\r\n                            onChange={(event, value) => {\r\n                                this.onBarCountChange(value);\r\n                            }}\r\n                            disabled={this.state.isBusy}\r\n                        />\r\n                        <br /> <br />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortInterface;","\r\nimport {React, Component} from 'react';\r\nimport Header from './header';\r\nimport Footer from './footer';\r\nimport  SortInterface from './sortingInterface';\r\nclass Main extends Component{\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <SortInterface/>\r\n                <Footer/>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import './App.css';\r\nimport Main from './components/main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}